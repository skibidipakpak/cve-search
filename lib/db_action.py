import collections
from datetime import datetime
from lib.signalNotification import sendNotification

from pymongo import InsertOne, UpdateOne

from lib.Toolkit import isBlacklisted
from lib.DatabaseLayer import (getWatchlistCVE, 
                                getAllEntities,
                                updateWatchlistCVE,
                                getWatchlistCVEbyID,
                                getInfo)
class DatabaseAction(object):

    actions = collections.namedtuple("Actions", "InsertOne UpdateOne")(0, 1)

    def __init__(self, action, collection, doc, update_watchlist=False):

        self.action = action
        self.collection = collection
        self.doc = doc
        self.update_watchlist = update_watchlist

        if self.update_watchlist and collection == 'cves':
            self._update_watchlist()


    @property
    def entry(self):
        if self.action == self.actions.InsertOne:
            return InsertOne(self.doc)
        elif self.action == self.actions.UpdateOne:
            return UpdateOne({"id": self.doc["id"]}, {"$set": self.doc}, upsert=True,)

    def _update_watchlist(self):
        if isBlacklisted(self.doc):
            return
        cve = self.doc
        if self.doc['vulnerable_configuration'] == []:
            cve['entity'] = ''
            cve['product'] = ''
            wcve = getWatchlistCVEbyID(self.doc['id'])
            if wcve and (wcve["cvss"] != self.doc['cvss'] or wcve['cvss3'] != self.doc['cvss3']):
                cve['treated'] = False
            updateWatchlistCVE(cve)
            return      
        infos = getInfo('watchlist')
        added = False
        for entity in getAllEntities():
            for cpe in entity['cpes']:
                for vc in self.doc['vulnerable_configuration']:
                    if cpe in vc:
                        wcve = getWatchlistCVE(self.doc['id'], entity['name'], cpe)
                        if wcve and wcve["cvss"] == self.doc['cvss'] and wcve['cvss3'] == self.doc['cvss3']:
                            break
                        cve['entity'] = entity['name']
                        cve['product'] = cpe
                        cve['treated'] = False
                        updateWatchlistCVE(cve)
                        added = True
                        if infos is None or infos['threshold_entity'] is None or cve['cvss3'] >= float(infos['threshold_entity']):
                            sendNotification(cve, new=True if wcve is None else False)
                        break
        if added:
            return
        if self.doc['cvss'] and self.doc['cvss'] >= 9 and self.doc['cvss3'] and self.doc['cvss3'] >= 9:
            product = self.doc['vulnerable_configuration'][0] if self.doc['vulnerable_configuration']!=[] else ''
            wcve = getWatchlistCVE(self.doc['id'], 'All', product)
            if wcve and wcve["cvss"] == self.doc['cvss'] and wcve['cvss3'] == self.doc['cvss3']:
                return
            cve['entity'] = 'All'
            cve['product'] = product
            updateWatchlistCVE(cve)            
            if infos is None or infos['threshold_critical'] is None or cve['cvss3'] >= float(infos['threshold_critical']):
                sendNotification(cve, new=True if wcve is None else False)